diff --git a/gatsby-node.js b/gatsby-node.js
index 44b9dc1..ac9d189 100755
--- a/gatsby-node.js
+++ b/gatsby-node.js
@@ -15,107 +15,107 @@ exports.onCreateNode = ({ node }) => {
 exports.createPages = async ({ graphql, actions }) => {
   const { createPage } = actions
 
-  const result = await graphql(`
-    {
-      allGhostPost(sort: { order: ASC, fields: published_at }) {
-        edges {
-          node {
-            slug
-          }
-        }
-      }
-      allGhostTag(sort: { order: ASC, fields: name }) {
-        edges {
-          node {
-            slug
-            url
-            postCount
-          }
-        }
-      }
-      allGhostAuthor(sort: { order: ASC, fields: name }) {
-        edges {
-          node {
-            slug
-            url
-            postCount
-          }
-        }
-      }
-      allGhostPage(sort: { order: ASC, fields: published_at }) {
-        edges {
-          node {
-            slug
-            url
-          }
-        }
-      }
-    }
-  `)
-
-  // Check for any errors
-  if (result.errors) {
-    throw new Error(result.errors)
-  }
-
-  // Extract query results
-  const pages = result.data.allGhostPage.edges
-  const posts = result.data.allGhostPost.edges
-
-  // Load templates
-  const pageTemplate = path.resolve(`./src/templates/blog.tsx`)
-  const postTemplate = path.resolve(`./src/templates/post.tsx`)
-
-  // Create pages
-  pages.forEach(({ node }) => {
-    console.log(node)
-
-    // This part here defines, that our pages will use
-    // a `/:slug/` permalink.
-    node.url = `/blog/${node.slug}/`
-
-    createPage({
-      path: node.url,
-      component: pageTemplate,
-      context: {
-        // Data passed to context is available
-        // in page queries as GraphQL variables.
-        slug: node.slug,
-      },
-    })
-  })
-
-  // Create post pages
-  posts.forEach(({ node }) => {
-    // This part here defines, that our posts will use
-    // a `/:slug/` permalink.
-    node.url = `/blog/${node.slug}/`
-
-    createPage({
-      path: node.url,
-      component: postTemplate,
-      context: {
-        // Data passed to context is available
-        // in page queries as GraphQL variables.
-        slug: node.slug,
-      },
-    })
-  })
-
-  // Create pagination
-  paginate({
-    createPage,
-    items: posts,
-    itemsPerPage: posts.length,
-    component: pageTemplate,
-    pathPrefix: ({ pageNumber }) => {
-      if (pageNumber === 0) {
-        return `/blog`
-      } else {
-        return `/blog`
-      }
-    },
-  })
+  // const result = await graphql(`
+  //   {
+  //     allGhostPost(sort: { order: ASC, fields: published_at }) {
+  //       edges {
+  //         node {
+  //           slug
+  //         }
+  //       }
+  //     }
+  //     allGhostTag(sort: { order: ASC, fields: name }) {
+  //       edges {
+  //         node {
+  //           slug
+  //           url
+  //           postCount
+  //         }
+  //       }
+  //     }
+  //     allGhostAuthor(sort: { order: ASC, fields: name }) {
+  //       edges {
+  //         node {
+  //           slug
+  //           url
+  //           postCount
+  //         }
+  //       }
+  //     }
+  //     allGhostPage(sort: { order: ASC, fields: published_at }) {
+  //       edges {
+  //         node {
+  //           slug
+  //           url
+  //         }
+  //       }
+  //     }
+  //   }
+  // `)
+
+  // // Check for any errors
+  // if (result.errors) {
+  //   throw new Error(result.errors)
+  // }
+
+  // // Extract query results
+  // const pages = result.data.allGhostPage.edges
+  // const posts = result.data.allGhostPost.edges
+
+  // // Load templates
+  // const pageTemplate = path.resolve(`./src/templates/blog.tsx`)
+  // const postTemplate = path.resolve(`./src/templates/post.tsx`)
+
+  // // Create pages
+  // pages.forEach(({ node }) => {
+  //   console.log(node)
+
+  //   // This part here defines, that our pages will use
+  //   // a `/:slug/` permalink.
+  //   node.url = `/blog/${node.slug}/`
+
+  //   createPage({
+  //     path: node.url,
+  //     component: pageTemplate,
+  //     context: {
+  //       // Data passed to context is available
+  //       // in page queries as GraphQL variables.
+  //       slug: node.slug,
+  //     },
+  //   })
+  // })
+
+  // // Create post pages
+  // posts.forEach(({ node }) => {
+  //   // This part here defines, that our posts will use
+  //   // a `/:slug/` permalink.
+  //   node.url = `/blog/${node.slug}/`
+
+  //   createPage({
+  //     path: node.url,
+  //     component: postTemplate,
+  //     context: {
+  //       // Data passed to context is available
+  //       // in page queries as GraphQL variables.
+  //       slug: node.slug,
+  //     },
+  //   })
+  // })
+
+  // // Create pagination
+  // paginate({
+  //   createPage,
+  //   items: posts,
+  //   itemsPerPage: posts.length,
+  //   component: pageTemplate,
+  //   pathPrefix: ({ pageNumber }) => {
+  //     if (pageNumber === 0) {
+  //       return `/blog`
+  //     } else {
+  //       return `/blog`
+  //     }
+  //   },
+  // })
 
   const getMarkdown = url => {
     return new Promise(resolve => {
@@ -210,11 +210,4 @@ exports.createPages = async ({ graphql, actions }) => {
     component: require.resolve("./src/templates/icons.tsx"),
     context: { icons },
   })
-
-  if (page.path.match(/^\/sign-in/)) {
-    page.matchPath = `/sign-in/:path`
-
-    // Update the page.
-    createPage(page)
-  }
 }
